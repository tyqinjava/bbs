<p>&nbsp; &nbsp; &nbsp; &nbsp;</p><p>mysql sql语句大全</p><p>1、说明：创建数据库</p><p>CREATE DATABASE database-name</p><p>2、说明：删除数据库</p><p>drop database dbname</p><p>3、说明：备份sql server</p><p>--- 创建 备份数据的 device</p><p>USE master</p><p>EXEC sp_addumpdevice &#39;disk&#39;, &#39;testBack&#39;, &#39;c:\mssql7backup\MyNwind_1.dat&#39;</p><p>--- 开始 备份</p><p>BACKUP DATABASE pubs TO testBack</p><p>4、说明：创建新表</p><p>create table tabname(col1 type1 [not null] [primary key],col2 type2 [not null],..)</p><p>根据已有的表创建新表：</p><p>A：create table tab_new like tab_old (使用旧表创建新表)</p><p>B：create table tab_new as select col1,col2… from tab_old definition only</p><p>5、说明：删除新表</p><p>drop table tabname</p><p>6、说明：增加一个列</p><p>Alter table tabname add column col type</p><p>注：列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。</p><p>7、说明：添加主键： Alter table tabname add primary key(col)</p><p>说明：删除主键： Alter table tabname drop primary key(col)</p><p>8、说明：创建索引：create [unique] index idxname on tabname(col….)</p><p>删除索引：drop index idxname</p><p>注：索引是不可更改的，想更改必须删除重新建。</p><p>9、说明：创建视图：create view viewname as select statement</p><p>删除视图：drop view viewname</p><p>10、说明：几个简单的基本的sql语句</p><p>选择：select * from table1 where 范围</p><p>插入：insert into table1(field1,field2) values(value1,value2)</p><p>删除：delete from table1 where 范围</p><p>更新：update table1 set field1=value1 where 范围</p><p>查找：select * from table1 where field1 like ’%value1%’ ---like的语法很精妙，查资料!</p><p>排序：select * from table1 order by field1,field2 [desc]</p><p>总数：select count as totalcount from table1</p><p>求和：select sum(field1) as sumvalue from table1</p><p>平均：select avg(field1) as avgvalue from table1</p><p>最大：select max(field1) as maxvalue from table1</p><p>最小：select min(field1) as minvalue from table1</p><p>11、说明：几个高级查询运算词</p><p>A： UNION 运算符</p><p>UNION 运算符通过组合其他两个结果表（例如 TABLE1 和 TABLE2）并消去表中任何重复行而派生出一个结果表。当 ALL 随 UNION 一起使用时（即 UNION ALL），不消除重复行。两种情况下，派生表的每一行不是来自 TABLE1 就是来自 TABLE2。</p><p>B： EXCEPT 运算符</p><p>EXCEPT 运算符通过包括所有在 TABLE1 中但不在 TABLE2 中的行并消除所有重复行而派生出一个结果表。当 ALL 随 EXCEPT 一起使用时 (EXCEPT ALL)，不消除重复行。</p><p>C： INTERSECT 运算符</p><p>INTERSECT 运算符通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。当 ALL 随 INTERSECT 一起使用时 (INTERSECT ALL)，不消除重复行。</p><p>注：使用运算词的几个查询结果行必须是一致的。</p><p>12、说明：使用外连接</p><p>A、left （outer） join：</p><p>左外连接（左连接）：结果集几包括连接表的匹配行，也包括左连接表的所有行。</p><p>SQL: select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c</p><p>B：right （outer） join:</p><p>右外连接(右连接)：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。</p><p>C：full/cross （outer） join：</p><p>全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录。</p><p>12、分组:Group by:</p><p>&nbsp; 一张表，一旦分组完成后，查询后只能得到组相关的信息。</p><p>&nbsp;组相关的信息：（统计信息） count,sum,max,min,avg &nbsp;分组的标准)</p><p>&nbsp; &nbsp; 在SQLServer中分组时：不能以text,ntext,image类型的字段作为分组依据</p><p>&nbsp;在selecte统计函数中的字段，不能和普通的字段放在一起；</p><p>13、对数据库进行操作：</p><p>&nbsp;分离数据库： sp_detach_db; 附加数据库：sp_attach_db 后接表明，附加需要完整的路径名</p><p>14.如何修改数据库的名称:</p><p>sp_renamedb &#39;old_name&#39;, &#39;new_name&#39;</p><p>&nbsp;</p><p>二、提升</p><p>1、说明：复制表(只复制结构,源表名：a 新表名：b) (Access可用)</p><p>法一：select * into b from a where 1&lt;&gt;1（仅用于SQlServer）</p><p>法二：select top 0 * into b from a</p><p>2、说明：拷贝表(拷贝数据,源表名：a 目标表名：b) (Access可用)</p><p>insert into b(a, b, c) select d,e,f from b;</p><p>3、说明：跨数据库之间表的拷贝(具体数据使用绝对路径) (Access可用)</p><p>insert into b(a, b, c) select d,e,f from b in ‘具体数据库’ where 条件</p><p>例子：..from b in &#39;&quot;&amp;Server.MapPath(&quot;.&quot;)&amp;&quot;\data.mdb&quot; &amp;&quot;&#39; where..</p><p>4、说明：子查询(表名1：a 表名2：b)</p><p>select a,b,c from a where a IN (select d from b ) 或者: select a,b,c from a where a IN (1,2,3)</p><p>5、说明：显示文章、提交人和最后回复时间</p><p>select a.title,a.username,b.adddate from table a,(select max(adddate) adddate from table where table.title=a.title) b</p><p>6、说明：外连接查询(表名1：a 表名2：b)</p><p>select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c</p><p>7、说明：在线视图查询(表名1：a )</p><p>select * from (SELECT a,b,c FROM a) T where t.a &gt; 1;</p><p>8、说明：between的用法,between限制查询数据范围时包括了边界值,not between不包括</p><p>select * from table1 where time between time1 and time2</p><p>select a,b,c, from table1 where a not between 数值1 and 数值2</p><p>9、说明：in 的使用方法</p><p>select * from table1 where a [not] in (‘值1’,’值2’,’值4’,’值6’)</p><p>10、说明：两张关联表，删除主表中已经在副表中没有的信息</p><p>delete from table1 where not exists ( select * from table2 where table1.field1=table2.field1 )</p><p>11、说明：四表联查问题：</p><p>select * from a left inner join b on a.a=b.b right inner join c on a.a=c.c inner join d on a.a=d.d where .....</p><p>12、说明：日程安排提前五分钟提醒</p><p>SQL: select * from 日程安排 where datediff(&#39;minute&#39;,f开始时间,getdate())&gt;5</p><p>13、说明：一条sql 语句搞定数据库分页</p><p>select top 10 b.* from (select top 20 主键字段,排序字段 from 表名 order by 排序字段 desc) a,表名 b where b.主键字段 = a.主键字段 order by a.排序字段</p><p>具体实现：</p><p>关于数据库分页：</p><p>&nbsp; declare @start int,@end int</p><p>&nbsp; @sql &nbsp;nvarchar(600)</p><p>&nbsp; set @sql=’select top’+str(@end-@start+1)+’+from T where rid not in(select top’+str(@str-1)+’Rid from T where Rid&gt;-1)’</p><p>&nbsp; exec sp_executesql @sql</p><p>&nbsp;</p><p>注意：在top后不能直接跟一个变量，所以在实际应用中只有这样的进行特殊的处理。Rid为一个标识列，如果top后还有具体的字段，这样做是非常有好处的。因为这样可以避免 top的字段如果是逻辑索引的，查询的结果后实际表中的不一致（逻辑索引中的数据有可能和数据表中的不一致，而查询时如果处在索引则首先查询索引）</p><p>14、说明：前10条记录</p><p>select top 10 * form table1 where 范围</p><p>15、说明：选择在每一组b值相同的数据中对应的a最大的记录的所有信息(类似这样的用法可以用于论坛每月排行榜,每月热销产品分析,按科目成绩排名,等等.)</p><p>select a,b,c from tablename ta where a=(select max(a) from tablename tb where tb.b=ta.b)</p><p>16、说明：包括所有在 TableA 中但不在 TableB和TableC 中的行并消除所有重复行而派生出一个结果表</p><p>(select a from tableA ) except (select a from tableB) except (select a from tableC)</p><p>17、说明：随机取出10条数据</p><p>select top 10 * from tablename order by newid()</p><p>18、说明：随机选择记录</p><p>select newid()</p><p>19、说明：删除重复记录</p><p>1),delete from tablename where id not in (select max(id) from tablename group by col1,col2,...)</p><p>2),select distinct * into temp from tablename</p><p>&nbsp; delete from tablename</p><p>&nbsp; insert into tablename select * from temp</p><p>评价： 这种操作牵连大量的数据的移动，这种做法不适合大容量但数据操作</p><p>3),例如：在一个外部表中导入数据，由于某些原因第一次只导入了一部分，但很难判断具体位置，这样只有在下一次全部导入，这样也就产生好多重复的字段，怎样删除重复字段</p><p>alter table tablename</p><p>--添加一个自增列</p><p>add &nbsp;column_b int identity(1,1)</p><p>&nbsp;delete from tablename where column_b not in(</p><p>select max(column_b) &nbsp;from tablename group by column1,column2,...)</p><p>alter table tablename drop column column_b</p><p>20、说明：列出数据库里所有的表名</p><p>select name from sysobjects where type=&#39;U&#39; // U代表用户</p><p>21、说明：列出表里的所有的列名</p><p>select name from syscolumns where id=object_id(&#39;TableName&#39;)</p><p>22、说明：列示type、vender、pcs字段，以type字段排列，case可以方便地实现多重选择，类似select 中的case。</p><p>select type,sum(case vender when &#39;A&#39; then pcs else 0 end),sum(case vender when &#39;C&#39; then pcs else 0 end),sum(case vender when &#39;B&#39; then pcs else 0 end) FROM tablename group by type</p><p>显示结果：</p><p>type vender pcs</p><p>电脑 A 1</p><p>电脑 A 1</p><p>光盘 B 2</p><p>光盘 A 2</p><p>手机 B 3</p><p>手机 C 3</p><p>23、说明：初始化表table1</p><p>TRUNCATE TABLE table1</p><p>24、说明：选择从10到15的记录</p><p>select top 5 * from (select top 15 * from table order by id asc) table_别名 order by id desc</p><p>三、技巧</p><p>1、1=1，1=2的使用，在SQL语句组合时用的较多</p><p>“where 1=1” 是表示选择全部 &nbsp; &nbsp;“where 1=2”全部不选，</p><p>如：</p><p>if @strWhere !=&#39;&#39;</p><p>begin</p><p>set @strSQL = &#39;select count(*) as Total from [&#39; + @tblName + &#39;] where &#39; + @strWhere</p><p>end</p><p>else</p><p>begin</p><p>set @strSQL = &#39;select count(*) as Total from [&#39; + @tblName + &#39;]&#39;</p><p>end</p><p>我们可以直接写成</p><p>错误！未找到目录项。</p><p>set @strSQL = &#39;select count(*) as Total from [&#39; + @tblName + &#39;] where 1=1 安定 &#39;+ @strWhere 2、收缩数据库</p><p>--重建索引</p><p>DBCC REINDEX</p><p>DBCC INDEXDEFRAG</p><p>--收缩数据和日志</p><p>DBCC SHRINKDB</p><p>DBCC SHRINKFILE</p><p>3、压缩数据库</p><p>dbcc shrinkdatabase(dbname)</p><p>4、转移数据库给新用户以已存在用户权限</p><p>exec sp_change_users_login &#39;update_one&#39;,&#39;newname&#39;,&#39;oldname&#39;</p><p>go</p><p>5、检查备份集</p><p>RESTORE VERIFYONLY from disk=&#39;E:\dvbbs.bak&#39;</p><p>6、修复数据库</p><p>ALTER DATABASE [dvbbs] SET SINGLE_USER</p><p>GO</p><p>DBCC CHECKDB(&#39;dvbbs&#39;,repair_allow_data_loss) WITH TABLOCK</p><p>GO</p><p>ALTER DATABASE [dvbbs] SET MULTI_USER</p><p>GO</p><p>7、日志清除</p><p>SET NOCOUNT ON</p><p>DECLARE @LogicalFileName sysname,</p><p>&nbsp;@MaxMinutes INT,</p><p>&nbsp;@NewSize INT</p><p>&nbsp;</p><p>USE tablename -- 要操作的数据库名</p><p>SELECT &nbsp;@LogicalFileName = &#39;tablename_log&#39;, -- 日志文件名</p><p>@MaxMinutes = 10, -- Limit on time allowed to wrap log.</p><p>&nbsp;@NewSize = 1 &nbsp;-- 你想设定的日志文件的大小(M)</p><p>Setup / initialize</p><p>DECLARE @OriginalSize int</p><p>SELECT @OriginalSize = size</p><p>&nbsp;FROM sysfiles</p><p>&nbsp;WHERE name = @LogicalFileName</p><p>SELECT &#39;Original Size of &#39; + db_name() + &#39; LOG is &#39; +</p><p>&nbsp;CONVERT(VARCHAR(30),@OriginalSize) + &#39; 8K pages or &#39; +</p><p>&nbsp;CONVERT(VARCHAR(30),(@OriginalSize*8/1024)) + &#39;MB&#39;</p><p>&nbsp;FROM sysfiles</p><p>&nbsp;WHERE name = @LogicalFileName</p><p>CREATE TABLE DummyTrans</p><p>&nbsp;(DummyColumn char (8000) not null)</p><p>&nbsp;</p><p>DECLARE @Counter &nbsp; &nbsp;INT,</p><p>&nbsp;@StartTime DATETIME,</p><p>&nbsp;@TruncLog &nbsp; VARCHAR(255)</p><p>SELECT @StartTime = GETDATE(),</p><p>&nbsp;@TruncLog = &#39;BACKUP LOG &#39; + db_name() + &#39; WITH TRUNCATE_ONLY&#39;</p><p>DBCC SHRINKFILE (@LogicalFileName, @NewSize)</p><p>EXEC (@TruncLog)</p><p>-- Wrap the log if necessary.</p><p>WHILE @MaxMinutes &gt; DATEDIFF (mi, @StartTime, GETDATE()) -- time has not expired</p><p>&nbsp;AND @OriginalSize = (SELECT size FROM sysfiles WHERE name = @LogicalFileName)&nbsp;</p><p>&nbsp;AND (@OriginalSize * 8 /1024) &gt; @NewSize&nbsp;</p><p>&nbsp;BEGIN -- Outer loop.</p><p>SELECT @Counter = 0</p><p>&nbsp;WHILE &nbsp; ((@Counter &lt; @OriginalSize / 16) AND (@Counter &lt; 50000))</p><p>&nbsp;BEGIN -- update</p><p>&nbsp;INSERT DummyTrans VALUES (&#39;Fill Log&#39;) DELETE DummyTrans</p><p>&nbsp;SELECT @Counter = @Counter + 1</p><p>&nbsp;END</p><p>&nbsp;EXEC (@TruncLog)&nbsp;</p><p>&nbsp;END</p><p>SELECT &#39;Final Size of &#39; + db_name() + &#39; LOG is &#39; +</p><p>&nbsp;CONVERT(VARCHAR(30),size) + &#39; 8K pages or &#39; +</p><p>&nbsp;CONVERT(VARCHAR(30),(size*8/1024)) + &#39;MB&#39;</p><p>&nbsp;FROM sysfiles</p><p>&nbsp;WHERE name = @LogicalFileName</p><p>DROP TABLE DummyTrans</p><p>SET NOCOUNT OFF</p><p>8、说明：更改某个表</p><p>exec sp_changeobjectowner &#39;tablename&#39;,&#39;dbo&#39;</p><p>9、存储更改全部表</p><p>CREATE PROCEDURE dbo.User_ChangeObjectOwnerBatch</p><p>@OldOwner as NVARCHAR(128),</p><p>@NewOwner as NVARCHAR(128)</p><p>AS</p><p>DECLARE @Name &nbsp; &nbsp;as NVARCHAR(128)</p><p>DECLARE @Owner &nbsp; as NVARCHAR(128)</p><p>DECLARE @OwnerName &nbsp; as NVARCHAR(128)</p><p>DECLARE curObject CURSOR FOR</p><p>select &#39;Name&#39; &nbsp; &nbsp;= name,</p><p>&nbsp; &nbsp;&#39;Owner&#39; &nbsp; &nbsp;= user_name(uid)</p><p>from sysobjects</p><p>where user_name(uid)=@OldOwner</p><p>order by name</p><p>OPEN &nbsp; curObject</p><p>FETCH NEXT FROM curObject INTO @Name, @Owner</p><p>WHILE(@@FETCH_STATUS=0)</p><p>BEGIN &nbsp;&nbsp;</p><p>if @Owner=@OldOwner</p><p>begin</p><p>&nbsp; &nbsp;set @OwnerName = @OldOwner + &#39;.&#39; + rtrim(@Name)</p><p>&nbsp; &nbsp;exec sp_changeobjectowner @OwnerName, @NewOwner</p><p>end</p><p>-- select @name,@NewOwner,@OldOwner</p><p>FETCH NEXT FROM curObject INTO @Name, @Owner</p><p>END</p><p>close curObject</p><p>deallocate curObject</p><p>GO</p><p>&nbsp;</p><p>10、SQL SERVER中直接循环写入数据</p><p>declare @i int</p><p>set @i=1</p><p>while @i&lt;30</p><p>begin</p><p>&nbsp; &nbsp; insert into test (userid) values(@i)</p><p>&nbsp; &nbsp; set @i=@i+1</p><p>end</p><p>案例：</p><p>有如下表，要求就裱中所有沒有及格的成績，在每次增長0.1的基礎上，使他們剛好及格:</p><p>&nbsp;Name &nbsp; &nbsp; score</p><p>&nbsp;Zhangshan 80</p><p>&nbsp;Lishi &nbsp; &nbsp; &nbsp; 59</p><p>&nbsp;Wangwu &nbsp; &nbsp; &nbsp;50</p><p>&nbsp;Songquan 69</p><p>while((select min(score) from tb_table)&lt;60)</p><p>begin</p><p>update tb_table set score =score*1.01</p><p>where score&lt;60</p><p>if &nbsp;(select min(score) from tb_table)&gt;60</p><p>&nbsp; break</p><p>&nbsp;else</p><p>&nbsp; &nbsp; continue</p><p>end</p><p>&nbsp;</p><p>数据开发-经典</p><p>&nbsp;</p><p>1.按姓氏笔画排序:</p><p>Select * From TableName Order By CustomerName Collate Chinese_PRC_Stroke_ci_as //从少到多</p><p>2.数据库加密:</p><p>select encrypt(&#39;原始密码&#39;)</p><p>select pwdencrypt(&#39;原始密码&#39;)</p><p>select pwdcompare(&#39;原始密码&#39;,&#39;加密后密码&#39;) = 1--相同；否则不相同 encrypt(&#39;原始密码&#39;)</p><p>select pwdencrypt(&#39;原始密码&#39;)</p><p>select pwdcompare(&#39;原始密码&#39;,&#39;加密后密码&#39;) = 1--相同；否则不相同</p><p>3.取回表中字段:</p><p>declare @list varchar(1000),</p><p>@sql nvarchar(1000)</p><p>select @list=@list+&#39;,&#39;+b.name from sysobjects a,syscolumns b where a.id=b.id and a.name=&#39;表A&#39;</p><p>set @sql=&#39;select &#39;+right(@list,len(@list)-1)+&#39; from 表A&#39;</p><p>exec (@sql)</p><p>4.查看硬盘分区:</p><p>EXEC master..xp_fixeddrives</p><p>5.比较A,B表是否相等:</p><p>if (select checksum_agg(binary_checksum(*)) from A)</p><p>&nbsp; &nbsp; &nbsp;=</p><p>&nbsp; &nbsp; (select checksum_agg(binary_checksum(*)) from B)</p><p>print &#39;相等&#39;</p><p>else</p><p>print &#39;不相等&#39;</p><p>6.杀掉所有的事件探察器进程:</p><p>DECLARE hcforeach CURSOR GLOBAL FOR SELECT &#39;kill &#39;+RTRIM(spid) FROM master.dbo.sysprocesses</p><p>WHERE program_name IN(&#39;SQL profiler&#39;,N&#39;SQL 事件探查器&#39;)</p><p>EXEC sp_msforeach_worker &#39;?&#39;</p><p>7.记录搜索:</p><p>开头到N条记录</p><p>Select Top N * From 表</p><p>-------------------------------</p><p>N到M条记录(要有主索引ID)</p><p>Select Top M-N * From 表 Where ID in (Select Top M ID From 表) Order by ID &nbsp; Desc</p><p>----------------------------------</p><p>N到结尾记录</p><p>Select Top N * From 表 Order by ID Desc</p><p>案例</p><p>例如1：一张表有一万多条记录，表的第一个字段 RecID 是自增长字段， 写一个SQL语句，找出表的第31到第40个记录。</p><p>&nbsp;select top 10 recid from A where recid not &nbsp;in(select top 30 recid from A)</p><p>分析：如果这样写会产生某些问题，如果recid在表中存在逻辑索引。</p><p>&nbsp;select top 10 recid from A where……是从索引中查找，而后面的select top 30 recid from A则在数据表中查找，这样由于索引中的顺序有可能和数据表中的不一致，这样就导致查询到的不是本来的欲得到的数据。</p><p>解决方案</p><p>1， 用order by select top 30 recid from A order by ricid 如果该字段不是自增长，就会出现问题</p><p>2， 在那个子查询中也加条件：select top 30 recid from A where recid&gt;-1</p><p>例2：查询表中的最后以条记录，并不知道这个表共有多少数据,以及表结构。</p><p>set @s = &#39;select top 1 * from T &nbsp; where pid not in (select top &#39; + str(@count-1) + &#39; pid &nbsp;from &nbsp;T)&#39;</p><p>print @s &nbsp; &nbsp; &nbsp;exec &nbsp;sp_executesql &nbsp;@s</p><p>9：获取当前数据库中的所有用户表</p><p>select Name from sysobjects where xtype=&#39;u&#39; and status&gt;=0</p><p>10：获取某一个表的所有字段</p><p>select name from syscolumns where id=object_id(&#39;表名&#39;)</p><p>select name from syscolumns where id in (select id from sysobjects where type = &#39;u&#39; and name = &#39;表名&#39;)</p><p>两种方式的效果相同</p><p>11：查看与某一个表相关的视图、存储过程、函数</p><p>select a.* from sysobjects a, syscomments b where a.id = b.id and b.text like &#39;%表名%&#39;</p><p>12：查看当前数据库中所有存储过程</p><p>select name as 存储过程名称 from sysobjects where xtype=&#39;P&#39;</p><p>13：查询用户创建的所有数据库</p><p>select * from master..sysdatabases D where sid not in(select sid from master..syslogins where name=&#39;sa&#39;)</p><p>或者</p><p>select dbid, name AS DB_NAME from master..sysdatabases where sid &lt;&gt; 0x01</p><p>14：查询某一个表的字段和数据类型</p><p>select column_name,data_type from information_schema.columns</p><p>where table_name = &#39;表名&#39;</p><p>15：不同服务器数据库之间的数据操作</p><p>--创建链接服务器</p><p>exec sp_addlinkedserver &nbsp; &#39;ITSV &#39;, &#39; &#39;, &#39;SQLOLEDB &#39;, &#39;远程服务器名或ip地址 &#39;</p><p>exec sp_addlinkedsrvlogin &nbsp;&#39;ITSV &#39;, &#39;false &#39;,null, &#39;用户名 &#39;, &#39;密码 &#39;</p><p>--查询示例</p><p>select * from ITSV.数据库名.dbo.表名</p><p>--导入示例</p><p>select * into 表 from ITSV.数据库名.dbo.表名</p><p>--以后不再使用时删除链接服务器</p><p>exec sp_dropserver &nbsp;&#39;ITSV &#39;, &#39;droplogins &#39;</p><p>&nbsp;</p><p>--连接远程/局域网数据(openrowset/openquery/opendatasource)</p><p>--1、openrowset</p><p>--查询示例</p><p>select * from openrowset( &#39;SQLOLEDB &#39;, &#39;sql服务器名 &#39;; &#39;用户名 &#39;; &#39;密码 &#39;,数据库名.dbo.表名)</p><p>--生成本地表</p><p>select * into 表 from openrowset( &#39;SQLOLEDB &#39;, &#39;sql服务器名 &#39;; &#39;用户名 &#39;; &#39;密码 &#39;,数据库名.dbo.表名)</p><p>&nbsp;</p><p>--把本地表导入远程表</p><p>insert openrowset( &#39;SQLOLEDB &#39;, &#39;sql服务器名 &#39;; &#39;用户名 &#39;; &#39;密码 &#39;,数据库名.dbo.表名)</p><p>select *from 本地表</p><p>--更新本地表</p><p>update b</p><p>set b.列A=a.列A</p><p>&nbsp;from openrowset( &#39;SQLOLEDB &#39;, &#39;sql服务器名 &#39;; &#39;用户名 &#39;; &#39;密码 &#39;,数据库名.dbo.表名)as a inner join 本地表 b</p><p>on a.column1=b.column1</p><p>--openquery用法需要创建一个连接</p><p>--首先创建一个连接创建链接服务器</p><p>exec sp_addlinkedserver &nbsp; &#39;ITSV &#39;, &#39; &#39;, &#39;SQLOLEDB &#39;, &#39;远程服务器名或ip地址 &#39;</p><p>--查询</p><p>select *</p><p>FROM openquery(ITSV, &nbsp;&#39;SELECT * &nbsp;FROM 数据库.dbo.表名 &#39;)</p><p>--把本地表导入远程表</p><p>insert openquery(ITSV, &nbsp;&#39;SELECT * &nbsp;FROM 数据库.dbo.表名 &#39;)</p><p>select * from 本地表</p><p>--更新本地表</p><p>update b</p><p>set b.列B=a.列B</p><p>FROM openquery(ITSV, &nbsp;&#39;SELECT * FROM 数据库.dbo.表名 &#39;) as a&nbsp;</p><p>inner join 本地表 b on a.列A=b.列A</p><p>&nbsp;</p><p>--3、opendatasource/openrowset</p><p>SELECT &nbsp; *</p><p>FROM &nbsp; opendatasource( &#39;SQLOLEDB &#39;, &nbsp;&#39;Data Source=ip/ServerName;User ID=登陆名;Password=密码 &#39; ).test.dbo.roy_ta</p><p>--把本地表导入远程表</p><p>insert opendatasource( &#39;SQLOLEDB &#39;, &nbsp;&#39;Data Source=ip/ServerName;User ID=登陆名;Password=密码 &#39;).数据库.dbo.表名</p><p>select * from 本地表&nbsp;</p><p>SQL Server基本函数</p><p>SQL Server基本函数</p><p>1.字符串函数 长度与分析用</p><p>1,datalength(Char_expr) 返回字符串包含字符数,但不包含后面的空格</p><p>2,substring(expression,start,length) 取子串，字符串的下标是从“1”，start为起始位置，length为字符串长度，实际应用中以len(expression)取得其长度</p><p>3,right(char_expr,int_expr) 返回字符串右边第int_expr个字符，还用left于之相反</p><p>4,isnull( check_expression , replacement_value )如果check_expression為空，則返回replacement_value的值，不為空，就返回check_expression字符操作类</p><p>5,Sp_addtype 自定義數據類型</p><p>例如：EXEC sp_addtype birthday, datetime, &#39;NULL&#39;</p><p>6,set nocount {on|off}</p><p>使返回的结果中不包含有关受 Transact-SQL 语句影响的行数的信息。如果存储过程中包含的一些语句并不返回许多实际的数据，则该设置由于大量减少了网络流量，因此可显著提高性能。SET NOCOUNT 设置是在执行或运行时设置，而不是在分析时设置。</p><p>SET NOCOUNT 为 ON 时，不返回计数（表示受 Transact-SQL 语句影响的行数）。</p><p>SET NOCOUNT 为 OFF 时，返回计数</p><p>常识</p><p>&nbsp;</p><p>在SQL查询中：from后最多可以跟多少张表或视图：256</p><p>在SQL语句中出现 Order by,查询时，先排序，后取</p><p>在SQL中，一个字段的最大容量是8000，而对于nvarchar(4000),由于nvarchar是Unicode码。&nbsp;</p><p>&nbsp;&nbsp;</p><p>SQLServer2000同步复制技术实现步骤</p><p>一、 预备工作</p><p>1.发布服务器,订阅服务器都创建一个同名的windows用户,并设置相同的密码,做为发布快照文件夹的有效访问用户</p><p>--管理工具</p><p>--计算机管理</p><p>--用户和组</p><p>--右键用户</p><p>--新建用户</p><p>--建立一个隶属于administrator组的登陆windows的用户（SynUser）</p><p>2.在发布服务器上,新建一个共享目录,做为发布的快照文件的存放目录,操作:</p><p>我的电脑--D:\ 新建一个目录,名为: PUB</p><p>--右键这个新建的目录</p><p>--属性--共享</p><p>--选择&quot;共享该文件夹&quot;</p><p>--通过&quot;权限&quot;按纽来设置具体的用户权限,保证第一步中创建的用户(SynUser) 具有对该文件夹的所有权限</p><p>&nbsp;</p><p>--确定</p><p>3.设置SQL代理(SQLSERVERAGENT)服务的启动用户(发布/订阅服务器均做此设置)</p><p>开始--程序--管理工具--服务</p><p>--右键SQLSERVERAGENT</p><p>--属性--登陆--选择&quot;此账户&quot;</p><p>--输入或者选择第一步中创建的windows登录用户名（SynUser）</p><p>--&quot;密码&quot;中输入该用户的密码</p><p>4.设置SQL Server身份验证模式,解决连接时的权限问题(发布/订阅服务器均做此设置)</p><p>企业管理器</p><p>--右键SQL实例--属性</p><p>--安全性--身份验证</p><p>--选择&quot;SQL Server 和 Windows&quot;</p><p>--确定</p><p>5.在发布服务器和订阅服务器上互相注册</p><p>企业管理器</p><p>--右键SQL Server组</p><p>--新建SQL Server注册...</p><p>--下一步--可用的服务器中,输入你要注册的远程服务器名 --添加</p><p>--下一步--连接使用,选择第二个&quot;SQL Server身份验证&quot;</p><p>--下一步--输入用户名和密码（SynUser）</p><p>--下一步--选择SQL Server组,也可以创建一个新组</p><p>--下一步--完成</p><p>6.对于只能用IP,不能用计算机名的,为其注册服务器别名（此步在实施中没用到）</p><p>&nbsp;(在连接端配置,比如,在订阅服务器上配置的话,服务器名称中输入的是发布服务器的IP)</p><p>开始--程序--Microsoft SQL Server--客户端网络实用工具</p><p>--别名--添加</p><p>--网络库选择&quot;tcp/ip&quot;--服务器别名输入SQL服务器名</p><p>--连接参数--服务器名称中输入SQL服务器ip地址</p><p>--如果你修改了SQL的端口,取消选择&quot;动态决定端口&quot;,并输入对应的端口号</p><p>二、 正式配置</p><p>1、配置发布服务器</p><p>打开企业管理器，在发布服务器（B、C、D）上执行以下步骤:</p><p>(1) 从[工具]下拉菜单的[复制]子菜单中选择[配置发布、订阅服务器和分发]出现配置发布和分发向导</p><p>(2) [下一步] 选择分发服务器 可以选择把发布服务器自己作为分发服务器或者其他sql的服务器（选择自己）</p><p>(3) [下一步] 设置快照文件夹</p><p>采用默认\\servername\Pub</p><p>(4) [下一步] 自定义配置</p><p>可以选择:是,让我设置分发数据库属性启用发布服务器或设置发布设置</p><p>否,使用下列默认设置（推荐）</p><p>(5) [下一步] 设置分发数据库名称和位置 采用默认值</p><p>(6) [下一步] 启用发布服务器 选择作为发布的服务器</p><p>(7) [下一步] 选择需要发布的数据库和发布类型</p><p>(8) [下一步] 选择注册订阅服务器</p><p>(9) [下一步] 完成配置</p><p>2、创建出版物</p><p>发布服务器B、C、D上</p><p>(1)从[工具]菜单的[复制]子菜单中选择[创建和管理发布]命令</p><p>(2)选择要创建出版物的数据库，然后单击[创建发布]</p><p>(3)在[创建发布向导]的提示对话框中单击[下一步]系统就会弹出一个对话框。对话框上的内容是复制的三个类型。我们现在选第一个也就是默认的快照发布(其他两个大家可以去看看帮助)</p><p>(4)单击[下一步]系统要求指定可以订阅该发布的数据库服务器类型,</p><p>SQLSERVER允许在不同的数据库如 orACLE或ACCESS之间进行数据复制。</p><p>但是在这里我们选择运行&quot;SQL SERVER 2000&quot;的数据库服务器</p><p>(5)单击[下一步]系统就弹出一个定义文章的对话框也就是选择要出版的表</p><p>注意: 如果前面选择了事务发布 则再这一步中只能选择带有主键的表</p><p>(6)选择发布名称和描述</p><p>(7)自定义发布属性 向导提供的选择:</p><p>是 我将自定义数据筛选,启用匿名订阅和或其他自定义属性</p><p>否 根据指定方式创建发布 （建议采用自定义的方式）</p><p>(8)[下一步] 选择筛选发布的方式</p><p>(9)[下一步] 可以选择是否允许匿名订阅</p><p>1)如果选择署名订阅,则需要在发布服务器上添加订阅服务器</p><p>方法: [工具]-&gt;[复制]-&gt;[配置发布、订阅服务器和分发的属性]-&gt;[订阅服务器] 中添加</p><p>否则在订阅服务器上请求订阅时会出现的提示:改发布不允许匿名订阅</p><p>如果仍然需要匿名订阅则用以下解决办法</p><p>[企业管理器]-&gt;[复制]-&gt;[发布内容]-&gt;[属性]-&gt;[订阅选项] 选择允许匿名请求订阅</p><p>2)如果选择匿名订阅,则配置订阅服务器时不会出现以上提示</p><p>(10)[下一步] 设置快照 代理程序调度</p><p>(11)[下一步] 完成配置</p><p>当完成出版物的创建后创建出版物的数据库也就变成了一个共享数据库</p><p>有数据</p><p>srv1.库名..author有字段:id,name,phone,</p><p>srv2.库名..author有字段:id,name,telphone,adress</p><p>&nbsp;</p><p>要求：</p><p>srv1.库名..author增加记录则srv1.库名..author记录增加</p><p>srv1.库名..author的phone字段更新，则srv1.库名..author对应字段telphone更新</p><p>--*/</p><p>&nbsp;</p><p>--大致的处理步骤</p><p>--1.在 srv1 上创建连接服务器,以便在 srv1 中操作 srv2,实现同步</p><p>exec sp_addlinkedserver &#39;srv2&#39;,&#39;&#39;,&#39;SQLOLEDB&#39;,&#39;srv2的sql实例名或ip&#39;</p><p>exec sp_addlinkedsrvlogin &#39;srv2&#39;,&#39;false&#39;,null,&#39;用户名&#39;,&#39;密码&#39;</p><p>go</p><p>--2.在 srv1 和 srv2 这两台电脑中,启动 msdtc(分布式事务处理服务),并且设置为自动启动</p><p>。我的电脑--控制面板--管理工具--服务--右键 Distributed Transaction Coordinator--属性--启动--并将启动类型设置为自动启动</p><p>go</p><p>&nbsp;</p><p>&nbsp;</p><p>--然后创建一个作业定时调用上面的同步处理存储过程就行了</p><p>&nbsp;</p><p>企业管理器</p><p>--管理</p><p>--SQL Server代理</p><p>--右键作业</p><p>--新建作业</p><p>--&quot;常规&quot;项中输入作业名称</p><p>--&quot;步骤&quot;项</p><p>--新建</p><p>--&quot;步骤名&quot;中输入步骤名</p><p>--&quot;类型&quot;中选择&quot;Transact-SQL 脚本(TSQL)&quot;</p><p>--&quot;数据库&quot;选择执行命令的数据库</p><p>--&quot;命令&quot;中输入要执行的语句: exec p_process</p><p>--确定</p><p>--&quot;调度&quot;项</p><p>--新建调度</p><p>--&quot;名称&quot;中输入调度名称</p><p>--&quot;调度类型&quot;中选择你的作业执行安排</p><p>--如果选择&quot;反复出现&quot;</p><p>--点&quot;更改&quot;来设置你的时间安排</p><p>&nbsp;</p><p>&nbsp;</p><p>然后将SQL Agent服务启动,并设置为自动启动,否则你的作业不会被执行</p><p>&nbsp;</p><p>设置方法:</p><p>我的电脑--控制面板--管理工具--服务--右键 SQLSERVERAGENT--属性--启动类型--选择&quot;自动启动&quot;--确定.</p><p>&nbsp;</p><p>&nbsp;</p><p>--3.实现同步处理的方法2,定时同步</p><p>&nbsp;</p><p>--在srv1中创建如下的同步处理存储过程</p><p>create proc p_process</p><p>as</p><p>--更新修改过的数据</p><p>update b set name=i.name,telphone=i.telphone</p><p>from srv2.库名.dbo.author b,author i</p><p>where b.id=i.id and</p><p>(b.name &lt;&gt; i.name or b.telphone &lt;&gt; i.telphone)</p><p>&nbsp;</p><p>--插入新增的数据</p><p>insert srv2.库名.dbo.author(id,name,telphone)</p><p>select id,name,telphone from author i</p><p>where not exists(</p><p>select * from srv2.库名.dbo.author where id=i.id)</p><p>&nbsp;</p><p>--删除已经删除的数据(如果需要的话)</p><p>delete b</p><p>from srv2.库名.dbo.author b</p><p>where not exists(</p><p>select * from author where id=b.id)</p><p>go</p><p><br/></p>